plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "create_tram_additions.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    modImplementation("com.simibubi.create:create-${rootProject.minecraft_version}:${rootProject.create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${rootProject.registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${rootProject.minecraft_version}:${rootProject.flywheel_forge_version}")

    modImplementation("de.mrjulsen.mcdragonlib:dragonlib-forge:${rootProject.minecraft_version}-${rootProject.dragonlib_version}")
    modLocalRuntime("maven.modrinth:create-railways-navigator:mQxmHtke")
    modImplementation("maven.modrinth:create-railways-navigator:mQxmHtke")


    implementation(forgeRuntimeLibrary("io.github.seth-yang:java-wrapper-for-edge-tts:1.0.1"))
    implementation(forgeRuntimeLibrary("com.googlecode.soundlibs:jlayer:1.0.1.4"))
    implementation(forgeRuntimeLibrary("org.java-websocket:Java-WebSocket:1.5.7"))
    include("io.github.seth-yang:java-wrapper-for-edge-tts:1.0.0")
    include("com.googlecode.soundlibs:jlayer:1.0.1.4")
    include("org.java-websocket:Java-WebSocket:1.5.7")

    // DragNSound
    modLocalRuntime("de.mrjulsen.dragnsounds:dragnsounds-forge:${rootProject.minecraft_version}-${rootProject.dragnsounds_version}")
    modImplementation("de.mrjulsen.dragnsounds:dragnsounds-forge:${rootProject.minecraft_version}-${rootProject.dragnsounds_version}")
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-core:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-linux32:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-linux64:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-linux-arm32:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-linux-arm64:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-win32:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-win64:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-osxm1:${rootProject.jave_version}"))
    modImplementation(forgeRuntimeLibrary("ws.schild:jave-nativebin-osx64:${rootProject.jave_version}"))

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
